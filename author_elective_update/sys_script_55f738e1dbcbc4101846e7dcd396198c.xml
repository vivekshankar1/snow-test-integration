<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_chef_automate_asset_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Insert to attributes import</name>
        <order>105</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var logger = new Logger();
var jsonUtil = new JsonUtil();

(function executeRule(current, previous /*null when async*/) {
	
	logger.debug("Inserting to attributes import");
	try {
		var assetData = jsonUtil.parse(current.data);
		
		var attributesImport = new GlideRecordSecure('x_chef_automate_attributes_import');
		
		attributesImport.initialize();
        if (attributesImport.canCreate()) {
			logger.debug(gs.getMessage("User {0} can insert into x_chef_automate_attributes_import", gs.getUser().getName()));
		} else {
			logger.warn(gs.getMessage("User {0} cannot insert into x_chef_automate_attributes_import", gs.getUser().getName()));
		}
		logger.debug("Asset data length ".concat(assetData.length));
	
		// Map Request to Table
		for(var entry = 0; entry < assetData.length; entry++) {
			var asset =  assetData[entry];

			MapToImportTable(attributesImport, asset, logger);
			if (attributesImport.insert() === null) {
				logger.warn("Insert failed into x_chef_automate_attributes_import");
			} else {
				logger.debug("Insert succeeded into x_chef_automate_attributes_import");
			}
		}
	} catch (err) {
		logger.errorWithStack("Insert to attributes error", err);
	}

})(current, previous);

function MapToImportTable(attributesImport, asset, logger){
	try {
		var attributes = jsonUtil.getObject(asset, "attributes");
        attributesImport.all_value_count = jsonUtil.getIntValue(attributes, "all_value_count");
        attributesImport.default_value_count = jsonUtil.getIntValue(attributes, "default_value_count");
        attributesImport.normal_value_count = jsonUtil.getIntValue(attributes, "normal_value_count");
        attributesImport.automatic_value_count = jsonUtil.getIntValue(attributes, "automatic_value_count");
        attributesImport.override_value_count = jsonUtil.getIntValue(attributes, "override_value_count");
		attributesImport.setValue("default", jsonUtil.stringify(jsonUtil.getObject(attributes, "default")));
		attributesImport.normal = jsonUtil.stringify(jsonUtil.getObject(attributes, "normal"));
		attributesImport.automatic = jsonUtil.stringify(jsonUtil.getObject(attributes, "automatic"));
		attributesImport.override = jsonUtil.stringify(jsonUtil.getObject(attributes, "override"));
	} catch (err) {
		logger.errorWithStack("Chef Automate Import Table Mapping Error", err);
		throw err;
	}
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2020-02-18 11:03:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>55f738e1dbcbc4101846e7dcd396198c</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>Insert to attributes import</sys_name>
        <sys_overrides/>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_script_55f738e1dbcbc4101846e7dcd396198c</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2020-02-18 16:09:00</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=55f738e1dbcbc4101846e7dcd396198c"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</application>
        <file_path/>
        <instance_id>9d0d9e48dbfbcf802ffa7236bf961920</instance_id>
        <instance_name>ven02358</instance_name>
        <name>sys_script_55f738e1dbcbc4101846e7dcd396198c</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;false&lt;/action_update&gt;&lt;active&gt;false&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_chef_automate_asset_queue&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Insert to attributes import&lt;/name&gt;&lt;order&gt;105&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[var logger = new Logger();
var jsonUtil = new JsonUtil();

(function executeRule(current, previous /*null when async*/) {
	
	logger.debug("Inserting to attributes import");
	try {
		var assetData = jsonUtil.parse(current.data);
		
		var attributesImport = new GlideRecordSecure('x_chef_automate_attributes_import');
		
		attributesImport.initialize();
        if (attributesImport.canCreate()) {
			logger.debug(gs.getMessage("User {0} can insert into x_chef_automate_attributes_import", gs.getUser().getName()));
		} else {
			logger.warn(gs.getMessage("User {0} cannot insert into x_chef_automate_attributes_import", gs.getUser().getName()));
		}
		logger.debug("Asset data length ".concat(assetData.length));
	
		// Map Request to Table
		for(var entry = 0; entry &lt; assetData.length; entry++) {
			var asset =  assetData[entry];

			MapToImportTable(attributesImport, asset, logger);
			if (attributesImport.insert() === null) {
				logger.warn("Insert failed into x_chef_automate_attributes_import");
			} else {
				logger.debug("Insert succeeded into x_chef_automate_attributes_import");
			}
		}
	} catch (err) {
		logger.errorWithStack("Insert to attributes error", err);
	}

})(current, previous);

function MapToImportTable(attributesImport, asset, logger){
	try {
		var attributes = jsonUtil.getObject(asset, "attributes");
        attributesImport.all_value_count = jsonUtil.getIntValue(attributes, "all_value_count");
        attributesImport.default_value_count = jsonUtil.getIntValue(attributes, "default_value_count");
        attributesImport.normal_value_count = jsonUtil.getIntValue(attributes, "normal_value_count");
        attributesImport.automatic_value_count = jsonUtil.getIntValue(attributes, "automatic_value_count");
        attributesImport.override_value_count = jsonUtil.getIntValue(attributes, "override_value_count");
		attributesImport.setValue("default", jsonUtil.stringify(jsonUtil.getObject(attributes, "default")));
		attributesImport.normal = jsonUtil.stringify(jsonUtil.getObject(attributes, "normal"));
		attributesImport.automatic = jsonUtil.stringify(jsonUtil.getObject(attributes, "automatic"));
		attributesImport.override = jsonUtil.stringify(jsonUtil.getObject(attributes, "override"));
	} catch (err) {
		logger.errorWithStack("Chef Automate Import Table Mapping Error", err);
		throw err;
	}
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;mscott&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-02-18 11:03:55&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;55f738e1dbcbc4101846e7dcd396198c&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;Insert to attributes import&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Chef Automate" source="x_chef_automate"&gt;4cd4b300db68e700197478fdaa961908&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Chef Automate"&gt;4cd4b300db68e700197478fdaa961908&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_55f738e1dbcbc4101846e7dcd396198c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;mscott&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-02-18 16:09:00&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=55f738e1dbcbc4101846e7dcd396198c"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1086224373</payload_hash>
        <record_name>Insert to attributes import</record_name>
        <reverted_from/>
        <source>15c27c2ddb8bc4101846e7dcd39619c7</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2020-02-18 16:09:00</sys_created_on>
        <sys_id>2aeb866ddbcfc4101846e7dcd3961922</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>170590f510a0000001</sys_recorded_at>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2020-02-18 16:09:00</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>22eb866d98cfc41027b829fce9eeb722</update_guid>
        <update_guid_history>22eb866d98cfc41027b829fce9eeb722:-1086224373,77960da14c0fc4101ff392d6c8ce384a:95862458,408601e1600fc4109dd39aac6ab41c9c:-1234499333,125601e1820fc4105a43459f22084264:631127138,e5164d61ac0fc41060153ffaff69224a:2076900071</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2020-02-18 17:02:06</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>09820e13a2524756a36c1eecc137f224</sys_id>
        <sys_metadata>55f738e1dbcbc4101846e7dcd396198c</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Insert to attributes import</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_parent display_value="Asset Queue">196f56cadb116380197478fdaa9619b3</sys_parent>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_scope_delete display_value="">03835e456e36492781266dc672a19f01</sys_scope_delete>
        <sys_update_name>sys_script_55f738e1dbcbc4101846e7dcd396198c</sys_update_name>
        <sys_update_version display_value="sys_script_55f738e1dbcbc4101846e7dcd396198c">2aeb866ddbcfc4101846e7dcd3961922</sys_update_version>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2020-02-18 17:02:06</sys_updated_on>
    </sys_metadata_delete>
</record_update>
