<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_chef_automate.ImportUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ImportUtil</name>
        <script><![CDATA[var ImportUtil = Class.create();
ImportUtil.prototype = {
    initialize: function() {
        this.logger = new Logger();
    },

    isComplianceReportEmpty: function(report) {
        for (var key in report) {
            return false;
        }
        return true;
    },

    mapToComplianceImportTable: function(complianceImport, asset) {
        try {
            // this breaks the node mapping, Report needs mac address and hostname
            // these need to come from ohai data in automate but must not be i
            var nodeData = jsonUtil.getObject(asset, "node");
            var report = jsonUtil.getObject(asset, "report");
            complianceImport.host_name = jsonUtil.getStringValue(nodeData, "hostname");
            complianceImport.mac_address = jsonUtil.getStringValue(nodeData, "macaddress");
            this.logger.debug(gs.getMessage("asset report {0}", report));

            complianceImport.id = jsonUtil.getStringValue(report, "id");
            complianceImport.node_id = jsonUtil.getStringValue(report, "node_id");
            complianceImport.node_name = jsonUtil.getStringValue(report, "node_name");
            var endTime = jsonUtil.getObject(report, "end_time");
            complianceImport.end_time = jsonUtil.getDateValue(jsonUtil.getIntValue(endTime, "seconds"));
            complianceImport.status = jsonUtil.getStringValue(report, "status");
            complianceImport.environment = jsonUtil.getStringValue(report, "environment");
            complianceImport.version = jsonUtil.getStringValue(report, "version");
            complianceImport.job_id = jsonUtil.getStringValue(report, "job_id");
            //complianceImport.ip_address = jsonUtil.getStringValue(report, "ipaddress");
			complianceImport.ip_address = jsonUtil.getStringValue(nodeData, "ipaddress");
            complianceImport.fqdn = jsonUtil.getStringValue(report, "fqdn");
			complianceImport.fqdn = jsonUtil.getStringValue(nodeData, "automate_fqdn");
            complianceImport.platform = jsonUtil.stringify(report.platform);
            complianceImport.statistics = jsonUtil.stringify(report.statistics);
            complianceImport.profiles = jsonUtil.stringify(report.profiles);

        } catch (err) {
            this.logger.errorWithStack("Chef Automate Compliance Import Table Mapping Error", err);
            throw err;
        }
    },

    type: 'ImportUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2020-06-02 10:46:02</sys_created_on>
        <sys_id>4d50759bdbc11090bd7169c3ca9619f7</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>ImportUtil</sys_name>
        <sys_package display_value="Chef Automate Integration App" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Chef Automate Integration App">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_script_include_4d50759bdbc11090bd7169c3ca9619f7</sys_update_name>
        <sys_updated_by>chef.automate</sys_updated_by>
        <sys_updated_on>2021-06-21 12:48:03</sys_updated_on>
    </sys_script_include>
</record_update>
