<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="Compliance Import to Report">f87d83dddb42b30070cd5e25ca961953</map>
        <order>100</order>
        <script><![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {

	// Add your code here
	var logger = new Logger();
	//logger.info(gs.getmessage("source: {0}", source.profiles));
	try {
		var profiles = JSON.parse(source.profiles);
		for (var p in profiles) {
			var profile = profiles[p];
			var complianceProfile = new GlideRecordSecure('x_chef_automate_compliance_profiles');
			complianceProfile.initialize();
			complianceProfile.addQuery('name', profile.name);
			complianceProfile.addQuery('version', profile.version);
			complianceProfile.query();
			if (complianceProfile.hasNext()) {
				logger.info(gs.getMessage("compliance profile {0} already exists", profile.name));
				continue;
			} else {
				complianceProfile.name = profile.name;				
				complianceProfile.title = profile.title;
				complianceProfile.copyright = profile.copyright;
				complianceProfile.copyright_email = profile.copyright_email;
				complianceProfile.summary = profile.summary;
				complianceProfile.version = profile.version;
				complianceProfile.sha256 = profile.sha256;
				var id = complianceProfile.insert();
				logger.info(gs.getMessage("inserting compliance profile {0} {1}", [complianceProfile.name, id]));
			}
			
			for (var c in profile.controls) {
				var control = profile.controls[c];
				var profileControl = new GlideRecordSecure('x_chef_automate_compliance_profile_controls');
				profileControl.initialize();
				profileControl.addQuery('id', control.id);
				profileControl.addQuery('profile', complianceProfile.sys_id);
				profileControl.query();
				if (profileControl.hasNext()) {
					continue;
				} else {
					profileControl.id = control.id;
					if (control.code !== undefined && control.code !== null) {
						profileControl.code = control.code.replace('\f', '\n');
					}
					profileControl.impact = control.impact;
					profileControl.title = control.title;
					var ref = control.source_location.ref;
					var line = control.source_location.line;
					profileControl.source_location = ref.concat('[').concat(line).concat(']');
					profileControl.profile = complianceProfile.sys_id;
					profileControl.insert();
				}
			}
		}
	} catch(err) {
		logger.error(gs.getMessage("onBefore compliance {0}", err.msg));
		logger.error(err.stack);
	}

})(source, map, log, target);]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2019-07-19 08:59:37</sys_created_on>
        <sys_id>ca55ea6cdb327b4070cd5e25ca9619b4</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>onBefore</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_transform_script_ca55ea6cdb327b4070cd5e25ca9619b4</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2019-11-18 10:03:53</sys_updated_on>
        <when>onBefore</when>
    </sys_transform_script>
</record_update>
