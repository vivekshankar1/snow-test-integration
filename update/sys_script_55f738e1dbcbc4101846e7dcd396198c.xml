<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_chef_automate_asset_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Insert to attributes import</name>
        <order>105</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[var logger = new Logger();
var jsonUtil = new JsonUtil();

(function executeRule(current, previous /*null when async*/) {
	
	logger.debug("Inserting to attributes import");
	try {
		var assetData = jsonUtil.parse(current.data);
		
		var attributesImport = new GlideRecordSecure('x_chef_automate_attributes_import');
		
		attributesImport.initialize();
        if (attributesImport.canCreate()) {
			logger.debug(gs.getMessage("User {0} can insert into x_chef_automate_attributes_import", gs.getUser().getName()));
		} else {
			logger.warn(gs.getMessage("User {0} cannot insert into x_chef_automate_attributes_import", gs.getUser().getName()));
		}
		logger.debug("Asset data length ".concat(assetData.length));
	
		// Map Request to Table
		for(var entry = 0; entry < assetData.length; entry++) {
			var asset =  assetData[entry];

			MapToImportTable(attributesImport, asset, logger);
			if (attributesImport.insert() === null) {
				logger.warn("Insert failed into x_chef_automate_attributes_import");
			} else {
				logger.debug("Insert succeeded into x_chef_automate_attributes_import");
			}
		}
	} catch (err) {
		logger.errorWithStack("Insert to attributes error", err);
	}

})(current, previous);

function MapToImportTable(attributesImport, asset, logger){
	try {
		var attributes = jsonUtil.getObject(asset, "attributes");
        attributesImport.all_value_count = jsonUtil.getIntValue(attributes, "all_value_count");
        attributesImport.default_value_count = jsonUtil.getIntValue(attributes, "default_value_count");
        attributesImport.normal_value_count = jsonUtil.getIntValue(attributes, "normal_value_count");
        attributesImport.automatic_value_count = jsonUtil.getIntValue(attributes, "automatic_value_count");
        attributesImport.override_value_count = jsonUtil.getIntValue(attributes, "override_value_count");
		attributesImport.setValue("default", jsonUtil.stringify(jsonUtil.getObject(attributes, "default")));
		attributesImport.normal = jsonUtil.stringify(jsonUtil.getObject(attributes, "normal"));
		attributesImport.automatic = jsonUtil.stringify(jsonUtil.getObject(attributes, "automatic"));
		attributesImport.override = jsonUtil.stringify(jsonUtil.getObject(attributes, "override"));
	} catch (err) {
		logger.errorWithStack("Chef Automate Import Table Mapping Error", err);
		throw err;
	}
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2020-02-18 11:03:55</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>55f738e1dbcbc4101846e7dcd396198c</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Insert to attributes import</sys_name>
        <sys_overrides/>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_script_55f738e1dbcbc4101846e7dcd396198c</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2020-02-18 11:06:15</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=55f738e1dbcbc4101846e7dcd396198c"/>
</record_update>
