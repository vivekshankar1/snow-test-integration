<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_chef_automate.Util</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Util</name>
        <script><![CDATA[var Util = Class.create();
Util.prototype = {
    initialize: function() {
		this.logger = new Logger();
    },
	
	getSafeNumber: function(string) {
		try {
			return Number(string);
		} catch (err) {
			logger.warn(err);
			return 0;
		}
	},
	
	getISODate: function (seconds) {
		try {
			logger.debug(gs.getMessage("seconds {0}", seconds));
			var d = 1000 * seconds;
			var date = new Date(1000 * seconds);
			logger.debug(gs.getMessage("seconds {0}, millis {1}, date {2}", [seconds, d, date.toISOString()]));
			return date.toISOString();
		} catch (err) {
			logger.warn(err);
			return null;
		}
	},
	
	getDate: function(seconds) {
		logger.debug("seconds: ".concat(seconds));
		try {
			var date = new GlideDateTime();
			date.subtract(date.getNumericValue());
			date.add(seconds * 1000);
			return date;
		} catch (err) {
			logger.error(gs.getMessage("getDate() {0}", err.message));
			logger.error(err.stack);
		}
		return "";	
	},
	
	scheduleDelete: function(tableName, days) {
		var logger = new Logger();
		try {
			var date = new GlideDateTime();
			date.addDaysUTC(-days);
			var table = new GlideRecordSecure(tableName);
			table.initialize();
			table.addQuery('sys_created_on', '<', date);
			table.query();
			if (table.hasNext()) {
				table.deleteMultiple();
				logger.info(gs.getMessage("Scheduled {0} cleanup deleted records before {1}", [tableName, date]));
			} else {
				logger.info(gs.getMessage("Scheduled {0} cleanup found no records to delete", tableName));
			}
		} catch (err) {
			logger.errorWithStack(gs.getMessage("Scheduled {0} cleanup", tabeName), err);
			throw err;
		}
	},

    type: 'Util'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2019-11-25 11:22:48</sys_created_on>
        <sys_id>28e993cedb910010bd7169c3ca9619d2</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>Util</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_script_include_28e993cedb910010bd7169c3ca9619d2</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2019-11-27 16:27:51</sys_updated_on>
    </sys_script_include>
</record_update>
