<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="Chef Automate Sync Transform">56940d5cdbe8e700197478fdaa96190b</map>
        <order>101</order>
        <script><![CDATA[// Client runs, run lists, recipes cookbooks transform script
(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {
	var logger = new Logger();
	var jsonUtil = new JsonUtil();
	var util = new Util();
	try {
		var clientRunJson = jsonUtil.parse(source.client_run);
		logger.debug(gs.getMessage("clientRunJson: {0}", clientRunJson));
		var clientRun = new GlideRecordSecure('x_chef_automate_client_run');
		clientRun.addQuery('id', jsonUtil.getStringValue(clientRunJson, "id"));
		clientRun.query();
		if (clientRun.hasNext()) {
			logger.debug("client run already imported");
		} else {
			var nodeId = clientRunJson.node_id;
		
			clientRun.node = source.server;
			clientRun.id = jsonUtil.getStringValue(clientRunJson, "id");
			clientRun.node_id = jsonUtil.getStringValue(clientRunJson, "node_id");
			clientRun.node_name = jsonUtil.getStringValue(clientRunJson, "node_name");
			clientRun.organization =  jsonUtil.getStringValue(clientRunJson, "organization");
		
			var startTimeObj = jsonUtil.getObject(clientRunJson, "start_time");
			logger.debug(gs.getMessage("startTimeObj: {0}", startTimeObj));
			var startTime = util.getDate(jsonUtil.getIntValue(startTimeObj, "seconds"));
			clientRun.start_time = startTime;
		
			var endTimeObj = jsonUtil.getObject(clientRunJson, "end_time");
			logger.debug(gs.getMessage("endTimeObj: {0}", endTimeObj));
			var endTime = util.getDate(jsonUtil.getIntValue(endTimeObj, "seconds"));
			clientRun.end_time = endTime;
		
			clientRun.source = jsonUtil.getStringValue(clientRunJson, "source");
			clientRun.status = jsonUtil.getStringValue(clientRunJson, "status");
			clientRun.total_resource_count = jsonUtil.getIntValue(clientRunJson, "total_resource_count");
			clientRun.chef_version = jsonUtil.getStringValue(clientRunJson, "chef_version");
			clientRun.uptime_seconds = jsonUtil.getIntValue(clientRunJson, "uptime_seconds");
			clientRun.environment = jsonUtil.getStringValue(clientRunJson, "environment");
			clientRun.fqdn = jsonUtil.getStringValue(clientRunJson, "fqdn");
			clientRun.source_fqdn = jsonUtil.getStringValue(clientRunJson, "source_fqdn");
			clientRun.ip_address = jsonUtil.getStringValue(clientRunJson, "ipaddress");
			
			var errorJson = jsonUtil.getObject(clientRunJson, "error");
			clientRun.error_class = jsonUtil.getStringValue(errorJson, "class");
			clientRun.error_message = jsonUtil.getStringValue(errorJson, "message");
			var trace = jsonUtil.getStringValue(errorJson, "backtrace");
			var backtraces = '';
			for (t in trace) {
				backtraces = backtraces.concat(trace[t]).concat('\n');
			}
			clientRun.error_backtrace = backtraces;
			var clientRunSysId = clientRun.insert();
		
			logger.debug(gs.getMessage("Client run inserted {0}", clientRunSysId));
		
			var cookbookJson = jsonUtil.parse(source.cookbooks);
		
			for (var cookbookKey in cookbookJson) {
				var cookbookId = "";
				var cookbookName = cookbookKey;
				var cookbookVersion = jsonUtil.getStringValue(cookbookJson[cookbookKey], "version");
				logger.debug(gs.getMessage("Cookbook {0}, {1} ", [cookbookName, cookbookVersion]));
			
				var cookbook = new GlideRecordSecure('x_chef_automate_ci_cookbook');
				if (cookbook.canCreate()) {
					logger.debug(gs.getMessage("User {0} can insert into x_chef_automate_ci_cookbook", gs.getUser().getName()));
				} else {
					logger.warn(gs.getMessage("User {0} cannot insert into x_chef_automate_ci_cookbook", gs.getUser().getName()));
				}
				cookbook.initialize();
				cookbook.addQuery('name', cookbookName);
				cookbook.addQuery('version', cookbookVersion);
				cookbook.query();
			
				if (!cookbook.next()) {
					cookbook.name = cookbookName;
					cookbook.version = cookbookVersion;
					cookbookId = cookbook.insert();
					logger.debug(gs.getMessage("cookbook id {0}", cookbookId));
				} else {
					cookbookId = cookbook.getValue('sys_id');
					logger.debug(gs.getMessage("Cookbook {0}, {1} already exists", [cookbookName, cookbookVersion]));
				}
			
				var clientRunCookbook = new GlideRecordSecure('x_chef_automate_client_run_cookbooks');
				clientRunCookbook.initialize();
				clientRunCookbook.client_run = clientRunSysId;
				clientRunCookbook.cookbook = cookbookId;
				clientRunCookbook.node = source.server;
				clientRunCookbook.insert();
			}
		
			var recipes = jsonUtil.getObject(clientRunJson, "recipes");
			for (var recipe in recipes) {
				var clientRunRecipe = new GlideRecordSecure('x_chef_automate_client_run_recipes');
				clientRunRecipe.initialize();
				clientRunRecipe.recipe = recipes[recipe];
				clientRunRecipe.client_run = clientRunSysId;
				clientRunRecipe.node = source.server;
				clientRunRecipe.insert();
			}
		
			var runLists = jsonUtil.getObject(clientRunJson, "run_list");
			for (var runList in runLists) {
				var clientRunList = new GlideRecordSecure('x_chef_automate_client_run_lists');
				clientRunList.initialize();
				clientRunList.run_list = runLists[runList];
				clientRunList.client_run = clientRunSysId;
				clientRunList.node = source.server;
				clientRunList.insert();
			}
		}
	} catch(error) {
		logger.errorWithStack("onAfter Client run transformScript error", error);
	}

})(source, map, log, target);
]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>dmurray</sys_created_by>
        <sys_created_on>2018-09-11 10:20:00</sys_created_on>
        <sys_id>4a311568dbe02b00197478fdaa9619de</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>onAfter</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_transform_script_4a311568dbe02b00197478fdaa9619de</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2020-03-27 14:30:57</sys_updated_on>
        <when>onAfter</when>
    </sys_transform_script>
</record_update>
