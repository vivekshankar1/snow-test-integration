<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_chef_automate.AutomateApi</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AutomateApi</name>
        <script><![CDATA[var AutomateApi = Class.create();
AutomateApi.prototype = {
    initialize: function(url, apiToken) {
        this.logger = new Logger();
        this.jsonUtil = new JsonUtil();
        this.automateUrl = url;
        this.apiToken = apiToken;
    },

    addSecret: function(name, user, password) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Add secret');

            message.setStringParameterNoEscape('secret_name', name);
            message.setStringParameterNoEscape('secret_id', '');
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('servicenow_user', user);
            message.setStringParameterNoEscape('api_token', this.apiToken);
            message.setStringParameterNoEscape('servicenow_password', password);

            var response = message.execute();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("response {0} {1}", [httpStatus, response.getBody()]));
            if (httpStatus == 200) {
                var responseBody = response.getBody();
                var responseJson = this.jsonUtil.parse(responseBody);
                var secretId = this.jsonUtil.getStringValue(responseJson, "id");
                this.logger.debug(gs.getMessage("Secret id {0}", secretId));
                return secretId;
            }
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate addSecret API", ex);
            throw ex;
        }
        return '';
    },

    updateSecret: function(name, user, password, secretId) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Update secret');

            message.setStringParameterNoEscape('secret_name', name);
            message.setStringParameterNoEscape('secret_id', secretId);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('servicenow_user', user);
            message.setStringParameterNoEscape('api_token', this.apiToken);
            message.setStringParameterNoEscape('servicenow_password', password);

            var response = message.execute();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("response {0}", httpStatus));
            if (httpStatus == 200) {
                return secretId;
            }
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate updateSecret API", ex);
            throw ex;
        }
        return '';
    },

    deleteSecret: function(secretId) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Delete secret');

            message.setStringParameterNoEscape('secret_id', secretId);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('api_token', this.apiToken);

            var response = message.executeAsync();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("delete secret response {0}", httpStatus));
            if (httpStatus == 200) {
                return secretId;
            }
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate deleteSecret API", ex);
            throw ex;
        }
        return '';
    },

    addDestination: function(name, secretId) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Add destination');

            message.setStringParameterNoEscape('name', name);
            message.setStringParameterNoEscape('secret_id', secretId);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('servicenow_url', this.getAppUrl());
            message.setStringParameterNoEscape('api_token', this.apiToken);

            var response = message.execute();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("response {0} {1}", [httpStatus, response.getBody()]));
            if (httpStatus == 200) {
                var responseBody = response.getBody();
                var responseJson = this.jsonUtil.parse(responseBody);
                return this.jsonUtil.getIntValue(responseJson, "id");
            }
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate addDestination API", ex);
            throw ex;
        }
        return -1;
    },


    updateDestination: function(destinationId, name, secretId) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Update destination');
            message.setStringParameterNoEscape('destination_id', destinationId);
            message.setStringParameterNoEscape('name', name);
            message.setStringParameterNoEscape('secret_id', secretId);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('servicenow_url', this.getAppUrl());
            message.setStringParameterNoEscape('api_token', this.apiToken);

            var response = message.execute();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("response {0} {1}", [httpStatus, response.getBody()]));
            if (httpStatus == 200) {
                var responseBody = response.getBody();
                var responseJson = this.jsonUtil.parse(responseBody);
                return name;
            }
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate updateDestination API", ex);
            throw ex;
        }
        return '';
    },
	
	destinationExists: function(destinationId) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Get destination');
            message.setStringParameterNoEscape('destination_id', destinationId);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('api_token', this.apiToken);

            var response = message.execute();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("response {0} {1}", [httpStatus, response.getBody()]));
            if (httpStatus == 200) {
                return {
                    "status": httpStatus,
                    "message": "destination with id: " + destinationId + " exists"
                };
            } else {
				return this._getError(response);
			}
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate getDestination API", ex);
            throw ex;
        }
    },

    deleteDestination: function(destinationId) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Delete destination');
            message.setStringParameterNoEscape('destination_id', destinationId);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('api_token', this.apiToken);

            var response = message.executeAsync();
            var httpStatus = response.getStatusCode();
            this.logger.debug(gs.getMessage("delete destination response {0} {1}", [httpStatus, response.getBody()]));
            if (httpStatus == 200) {
				return true;
			} else if (httpStatus == 404) {
				return false;
			}
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate updateDestination API", ex);
            throw ex;
        }
        return false;
    },

    testDestination: function(username, password) {

        try {

            var message = new sn_ws.RESTMessageV2('x_chef_automate.Automate API', 'Test destination');

            message.setStringParameterNoEscape('servicenow_user', username);
            message.setStringParameterNoEscape('servicenow_password', password);
            message.setStringParameterNoEscape('automate_url', this.automateUrl);
            message.setStringParameterNoEscape('servicenow_url', this.getAppUrl());
            message.setStringParameterNoEscape('api_token', this.apiToken);

            var response = message.execute();
            var httpStatus = response.getStatusCode();

            if (httpStatus == 200) {
                return {
                    "status": httpStatus,
                    "message": "service-now automate connectivity test passed"
                };
            } else {
                return this._getError(response);
            }
        } catch (ex) {
            this.logger.errorWithStack("Error calling automate testDestination API", ex);
            return {
                "status": 500,
                "message": ex.message
            };
        }
    },

    _getError: function(response) {
        var httpStatus = response.getStatusCode();
        this.logger.debug(gs.getMessage("response {0} {1}", [httpStatus, response.getBody()]));
        var body = response.getBody();
        var err = {
			"status": httpStatus
        };
        try {
            var json = this.jsonUtil.parse(body);
            if (json.code) {
                err['error'] = json.error;
            } else {
				err['error'] = response.getErrorMessage();
			}
        } catch (e) {
            this.logger.errorWithStack("AutomateAPI._getError", e);
            err['error'] = response.getErrorMessage() + " " + e.message;
        }
        return err;
    },

    getAppUrl: function() {
        return this.getInstance() + "/api/x_chef_automate/asset";
    },

    getInstance: function() {
        return "https://" + gs.getProperty("instance_name") + ".service-now.com";
    },

    type: 'AutomateApi'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2020-02-20 13:18:25</sys_created_on>
        <sys_id>6f263702db4f00101846e7dcd3961951</sys_id>
        <sys_mod_count>62</sys_mod_count>
        <sys_name>AutomateApi</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_script_include_6f263702db4f00101846e7dcd3961951</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2020-04-24 13:49:42</sys_updated_on>
    </sys_script_include>
</record_update>
