<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_chef_automate_asset_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Insert to compliance import</name>
        <order>110</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions>x_chef_automate.user</role_conditions>
        <script><![CDATA[var logger = new Logger();
var jsonUtil = new JsonUtil();

(function executeRule(current, previous /*null when async*/) {
	
	logger.debug("Inserting to compliance import");
	try {
		var assetData = jsonUtil.parse(current.data);
		
		var complianceImport = new GlideRecordSecure('x_chef_automate_compliance_import');
		
		complianceImport.initialize();
        if (complianceImport.canCreate()) {
			logger.debug(gs.getMessage("User {0} can insert into x_chef_automate_compliance_import", gs.getUser().getName()));
		} else {
			logger.warn(gs.getMessage("User {0} cannot insert into x_chef_automate_compliance_import", gs.getUser().getName()));
		}
		logger.debug("Asset data length ".concat(assetData.length));
	
		// Map Request to Table
		for(var entry = 0; entry < assetData.length; entry++) {
			var asset =  assetData[entry];
			var nodeData = jsonUtil.getObject(asset, "node_data");
			if (isEmpty(jsonUtil.getObject(nodeData, "report"))) {
				logger.debug("There is no compliance report to process");
				continue;
			}
			MapToImportTable(complianceImport, asset, logger);
			if (complianceImport.insert() === null) {
				logger.warn("Insert failed into x_chef_automate_compliance_import");
			} else {
				logger.debug("Insert succeeded into x_chef_automate_compliance_import");
			}
		}
	} catch (err) {
		logger.errorWithStack("Insert to compliance report error", err);
	}

})(current, previous);

function isEmpty(report) {
	for(var key in report) {
		return false;
	}
	return true;
}

function MapToImportTable(complianceImport, asset, logger){
	try {
			// this breaks the node mapping, Report needs mac address and hostname
			// these need to come from ohai data in automate but must not be i
			var nodeData = jsonUtil.getObject(asset, "node_data");
			var report = jsonUtil.getObject(nodeData, "report");
			complianceImport.host_name = jsonUtil.getStringValue(nodeData, "hostname");
			complianceImport.mac_address = jsonUtil.getStringValue(nodeData, "macaddress");
			logger.debug(gs.getMessage("asset report {0}", report));
			 
			complianceImport.id = jsonUtil.getStringValue(report, "id");
			complianceImport.node_id = jsonUtil.getStringValue(report, "node_id");
			complianceImport.node_name = jsonUtil.getStringValue(report, "node_name");
			var endTime = jsonUtil.getObject(report, "end_time");
			complianceImport.end_time = jsonUtil.getDateValue(jsonUtil.getIntValue(endTime, "seconds"));
			complianceImport.status = jsonUtil.getStringValue(report, "status");
			complianceImport.environment = jsonUtil.getStringValue(report, "environment");
			complianceImport.version = jsonUtil.getStringValue(report, "version");
			complianceImport.job_id = jsonUtil.getStringValue(report, "job_id");
			complianceImport.ip_address = jsonUtil.getStringValue(report, "ipaddress");
			complianceImport.fqdn = jsonUtil.getStringValue(report, "fqdn");
			complianceImport.controls = jsonUtil.stringify(report.controls);
			complianceImport.platform = jsonUtil.stringify(report.platform);
			complianceImport.statistics = jsonUtil.stringify(report.statistics);
			complianceImport.profiles = jsonUtil.stringify(report.profiles);
		
	} catch (err) {
		logger.errorWithStack("Chef Automate Import Table Mapping Error", err);
		throw err;
	}
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2019-06-13 15:12:36</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5a1022c1db0a730070cd5e25ca96195c</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>Insert to compliance import</sys_name>
        <sys_overrides/>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_script_5a1022c1db0a730070cd5e25ca96195c</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2019-11-27 13:51:51</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=5a1022c1db0a730070cd5e25ca96195c"/>
</record_update>
