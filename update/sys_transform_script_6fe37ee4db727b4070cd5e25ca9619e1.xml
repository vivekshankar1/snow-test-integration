<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="Compliance Import to Report">f87d83dddb42b30070cd5e25ca961953</map>
        <order>100</order>
        <script><![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {

	// Add your code here
	var logger = new Logger();
	//logger.info(gs.getmessage("source: {0}", source.profiles));
	try {
		var profiles = JSON.parse(source.profiles);
		for (var p in profiles) {
			var profile = profiles[p];
			//logger.info(gs.getMessage("RESULTS for profile {0}", profile.name));
			var profileId = "";
			
			var complianceProfile = new GlideRecordSecure('x_chef_automate_compliance_profiles');
			complianceProfile.initialize();
			complianceProfile.addQuery('name', profile.name);
			complianceProfile.addQuery('version', profile.version);
			complianceProfile.query();
			if (complianceProfile.hasNext()) {
				complianceProfile.next();
				profileId = complianceProfile.getValue("sys_id");
				logger.info(gs.getMessage("compliance profile {0}, {1}", [profileId, complianceProfile.sys_id]));
			} else {
				logger.info(gs.getMessage("NO PROFILE FOUND for {0}:{1}", [profile.name, profile.version]));
			}
			//logger.info(gs.getMessage("RESULTS for profile {0}, {1}", [profile.name, profileId]));
			for (var c in profile.controls) {
				var control = profile.controls[c];
				
				var profileControl = new GlideRecordSecure('x_chef_automate_compliance_profile_controls');
				profileControl.initialize();
				profileControl.addQuery('id', control.id);
				profileControl.addQuery('profile', complianceProfile.sys_id);
				profileControl.query();
				
				var controlId = "";
				if (profileControl.hasNext()) {
					profileControl.next();
					controlId = profileControl.sys_id;
				}
				//logger.info(gs.getMessage("RESULTS for profile {0}, control {1}, {2}", [profile.name, control.id, controlId]));
				for (var r in control.results) {
					var result = control.results[r];
					//logger.info(gs.getMessage("RESULTS for profile {0}, control {1}, result {2}", [profile.name, control.id, result.code_desc]));
					var controlResult = new GlideRecordSecure('x_chef_automate_compliance_report_results');
					controlResult.initialize();
					controlResult.compliance_report = target.sys_id;
					controlResult.compliance_profile = profileId;
					controlResult.compliance_profile_control = controlId;
					controlResult.code_desc = result.code_desc;
					controlResult.message = result.message;
					controlResult.run_time = result.run_time;
					controlResult.status = result.status;
					controlResult.insert();
				}
			}
		}
	} catch(err) {
		logger.error(err.msg);
		logger.error(err.stack);
	}

})(source, map, log, target);]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2019-07-19 10:25:20</sys_created_on>
        <sys_id>6fe37ee4db727b4070cd5e25ca9619e1</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>onAfter</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_transform_script_6fe37ee4db727b4070cd5e25ca9619e1</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2019-08-09 09:38:01</sys_updated_on>
        <when>onAfter</when>
    </sys_transform_script>
</record_update>
