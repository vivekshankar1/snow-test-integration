<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_map">
    <sys_transform_map action="INSERT_OR_UPDATE">
        <active>true</active>
        <copy_empty_fields>false</copy_empty_fields>
        <create_new_record_on_empty_coalesce_fields>false</create_new_record_on_empty_coalesce_fields>
        <enforce_mandatory_fields>No</enforce_mandatory_fields>
        <name>Compliance Import to Report</name>
        <order>100</order>
        <run_business_rules>true</run_business_rules>
        <run_script>true</run_script>
        <script><![CDATA[var jsonUtil = new JsonUtil();

(function transformRow(source, target, map, log, isUpdate) {
	
	// Add your code here
	var logger = new Logger();
	try {
	// look up the node from bleh
		logger.debug("***** TRANSFORMING TO LINK SERVER TABLE TO REPORT *******");
		logger.debug(gs.getMessage("Source IP {0}", source.ip_address));
	
		var server = new GlideRecordSecure("cmdb_ci_server");
		server.initialize();
		var useIp = gs.getProperty('x_chef_automate.ipAddress') == "true";
		logger.debug(gs.getMessage("useIp {0}", useIp));
		var useHostname = gs.getProperty('x_chef_automate.hostname') == "true";
		logger.debug(gs.getMessage("useHostname {0}", useHostname));
		var useMac = gs.getProperty('x_chef_automate.macAddress') == "true";
		logger.debug(gs.getMessage("useMac {0}", useMac));
		if (useIp == false && useHostname == false && useMac == false) {
			useIp = true;
		}
		if (useIp) {
			server.addQuery("ip_address", source.ip_address);
		}
		if (useMac) {
			server.addQuery("mac_address", source.mac_address);
		}
		if (useHostname) {
			server.addQuery("host_name", source.host_name);
		}
		server.query();
		if (server.next()) {
			target.node = server.sys_id;
			logger.debug(gs.getMessage("Server found for ip address {0}", source.ip_address));
		} else {
			logger.debug(gs.getMessage("No server found for ip {0}", source.ip_address));
		}
	
		// platform
		var platform = jsonUtil.parse(source.platform);
		var platformName = jsonUtil.getStringValue(platform, "name");
		var platformRelease = jsonUtil.getStringValue(platform, "release");
		logger.debug(gs.getMessage("platform {0} name {1} release {2}", [platform, platformName, platformRelease]));
		target.platform_name = platformName;
		target.platform_release = platformRelease;
	
		// stats
		var statistics = jsonUtil.parse(source.statistics);
		var duration = jsonUtil.getDecimalValue(statistics, "duration");
		target.duration = duration;
	} catch (err) {
		logger.error(gs.getMessage("Compliance import transform row {0}", err));
		logger.error(err.stack);
	}
			
})(source, target, map, log, action==="update");]]></script>
        <source_table>x_chef_automate_compliance_import</source_table>
        <sys_class_name>sys_transform_map</sys_class_name>
        <sys_created_by>mscott</sys_created_by>
        <sys_created_on>2019-06-14 13:03:47</sys_created_on>
        <sys_id>f87d83dddb42b30070cd5e25ca961953</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>Compliance Import to Report</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy/>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_transform_map_f87d83dddb42b30070cd5e25ca961953</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2019-11-27 08:11:00</sys_updated_on>
        <target_table>x_chef_automate_compliance_report</target_table>
    </sys_transform_map>
</record_update>
