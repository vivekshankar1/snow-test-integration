<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_chef_automate/asset</default_operation_uri>
        <enforce_acl>4e9dc22ddb0d2b40197478fdaa9619c1,66192ffddb856b40197478fdaa961988</enforce_acl>
        <http_method>POST</http_method>
        <name>create</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var logger = new Logger();
	logger.info("REST API call /api/x_chef_automate/asset");
	try {
		var version = request.getHeader("Chef-Data-Feed-Message-Version");
		logger.debug("Chef-Data-Feed-Message-Version: " + version);
		var dataStream = request.body.dataStream;
		var reader = new GlideTextReader(dataStream);
		var data = "[";
		var line = "";
		var max = 16777215;
		var testMessage = '{"text":"TEST: Successful validation completed by Automate"}';
		while((line = reader.readLine()) != null) {
			if (data.length == 1 && line === testMessage) {
				logger.debug("received test message");
				response.setStatus(200);
				return;
			}
			if (data.length + line.length > max - 1) {
				logger.debug(gs.getMessage("adding node will increase data {0} + {1} = ", [data.length, line.length, data.length + line.length]));
				// array of data res from stream so far
				data = data.substring(0, data.length - 1) + "]";
				processData(data);
				data = "[" + line + ",";
			} else {
				data += line + ',';
				logger.debug(gs.getMessage("node added data.length is {0}", data.length));
			}
		}
		
		data = data.substring(0, data.length - 1) + "]";
		logger.debug(gs.getMessage("node data length data.length is {0}", data.length));
		processData(data);
		
		response.setStatus(202);
		response.setContentType('application/json');
	} catch (err) {
		logger.errorWithStack("API error", err);
		error = new sn_ws_err.ServiceError();
		error.setStatus(500);
		error.setMessage(err.message);
		response.setError(error);
	}
				
})(request, response);
			
function processData(assetData) {
	var logger = new Logger();
	logger.debug(gs.getMessage("asset data: {0}", assetData));
		
	var assetsBufferTable = new GlideRecordSecure('x_chef_automate_asset_buffer');
	assetsBufferTable.initialize();
	if (assetsBufferTable.canCreate()) {
		logger.debug(gs.getMessage("User {0} can insert into x_chef_automate_asset_buffer", gs.getUser().getName()));
	}
	else {
		logger.warn(gs.getMessage("User {0} cannot insert into x_chef_automate_asset_buffer", gs.getUser().getName()));
	}
				
	// Add Request to Buffer
	MapToBufferTable(assetsBufferTable, assetData, logger);
	var assetId = assetsBufferTable.insert();
	if (assetId === null) {
		var message = "Insert failed into x_chef_automate_asset_import";
		logger.warn(message);
		var error = new sn_ws_err.ServiceError();
		error.setStatus(500);
		error.setMessage("Insert failed into x_chef_automate_asset_import");
		throw error;
	} else {
		logger.debug(gs.getMessage("Insert succeeded into x_chef_automate_asset_import {0}", assetId));
	}
}

function MapToBufferTable(assetsBufferTable, assetData){
	var logger = new Logger();
	try {
		assetsBufferTable.data = assetData;
	} catch (err) {
		logger.errorWithStack("Chef Automate Buffer Table Mapping Error", err);
		throw err;
	}
}]]></operation_script>
        <operation_uri>/api/x_chef_automate/v1/asset</operation_uri>
        <produces>application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>false</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-10 14:15:41</sys_created_on>
        <sys_id>88dc30d4dbe8e700197478fdaa96199e</sys_id>
        <sys_mod_count>102</sys_mod_count>
        <sys_name>create</sys_name>
        <sys_package display_value="Chef Automate" source="x_chef_automate">4cd4b300db68e700197478fdaa961908</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Chef Automate">4cd4b300db68e700197478fdaa961908</sys_scope>
        <sys_update_name>sys_ws_operation_88dc30d4dbe8e700197478fdaa96199e</sys_update_name>
        <sys_updated_by>mscott</sys_updated_by>
        <sys_updated_on>2019-11-27 09:57:45</sys_updated_on>
        <web_service_definition display_value="Chef Automate Asset Sync">f7bb7c18dbe8e700197478fdaa961992</web_service_definition>
        <web_service_version display_value="v1">63fa0669db0d2b40197478fdaa96199b</web_service_version>
    </sys_ws_operation>
</record_update>
